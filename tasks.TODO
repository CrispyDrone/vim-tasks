documentation:
	☐ Update 'Help' documentation to reflect changes and new features @priority(low)
	☐ Add 'change notes' and 'roadmap' or 'towards the future' section in readme?

bug fixes:
	☐ When sorting tasks on priority, duplicates are sometimes created... It seems to happen when you have empty lines below the group header @priority(critical)
	☐ Currently it's necessary to always have at least one empty line before a nested group header, because otherwise it will result in a wrong indendation @priority(medium)
	☐ You can copy paste a task above the Archive header, and then complete it @priority(low)
	☐ It's possible to create a task above the first group header when it is not on the first line @priority(low)
	☐ Prevent modification of buffer if no sorting needs to happen (?) @priority(low)

refactoring:
	☐ Any state that's required by MarkTaskAs should be passed to it (see the arguments required for executing the functions necessary for adding attributes) @priority(medium)
	☐ You need a function that's responsible for "reading" a line. Every other function will work with this "line datastructure" that already has a state associated with it etc @priority(high)
	☐ Change BelongsToProject to GetProject(lineNumber, direction) which returns a tuple/dictionary type object @priority(low)
	☐ Change BelongsToArchive to GetArchive(lineNumber, direction) which returns a tuple/dictionary type object @priority(low)
	☐ Would it be possible to not have this be a purely parsing based plugin, but instead have proper datastructures that get persisted to a file?? @priority(low)

new features:
	☐ Support commands (capitalized version of mappings), that will remove the 'worked' attribute (and others?) @priority(medium)
	☐ Automatically move 'started' tasks to the top of the group header @priority(high)
	☐ Allow user to customize whether 'started' tasks should be moved to top automatically @priority(high)
	☐ Support dot command @priority(high)
	☐ When changing from in progress to another state, it should add the 'worked' attribute @priority(medium)
	☐ Generalize sorting by attribute (allow user to specify a sorting lambda) @priority(medium)
	☐ Add support for "filtering tasks" which will extract all tasks matching a filter (adding project attribute or not) and putting it in the current cursor's location (has to be under a group header or not). This could be useful to for example to get all tasks due tomorrow to the top of the file (when group header validation is disabled) @priority(medium)
	☐ Allow user to determine whether tasks need to be associated with a group header or not @priority(medium)
	☐ Is it possible to support adding and removing attributes in a more general way? @priority(low)
	☐ Add 'created' attribute (?) @priority(low)
	☐ Add support for absolute due attribute (user will have to enter the date himself) @priority(low)
	☐ Add support for relative due attribute (user will have to enter the date himself), this will also always add a 'from' attribute or something similar that indicates when the due attribute was added @priority(low)
	☐ Find out ways to allow for 'tab' completion of dates? @priority(low)
	☐ Allow users to determine whether tasks should be indented or not compared to the group header @priority(low)
	☐ Allow the updating of a timestamp (will also be useful to update relative due attributes) @priority(low)
	☐ Allow the unarchiving of a task @priority(low)
	☐ Allow the unarchiving of all tasks @priority(low)
	☐ Support visual selection mode for actions such as marking as done or cancelled, unarchiving, archiving, updating timestamps, transforming into task, sorting,,... @priority(low)
	☐ Allow actions on group headers which will mark as done or cancelled, archive, unarchive, or update timestamps for all tasks belonging to that group header @priority(low)
	☐ Allow actions on group headers which will mark as done or cancelled, archive, unarchive, or update timestamps for all tasks belonging to that group header @priority(low)

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Archive:
	✓ Prevent cursor from moving when marking a task as done, cancelled, or started @priority(high) @done(2019-10-12 17:58) @project(bug fixes) @worked(1min)
	✓ Update issue with 'after' directory in readme @done(2019-10-12 17:49) @project(documentation) @worked(1min)
	✓ Update missing 'silent!' in 'after\ftplugin\tasks.vim` in readme? @done(2019-10-12 17:49) @project(documentation) @worked(1min)
	✓ Fix worked attribute having 0 minutes in case you finish it in less than 1 minute. By default it should add 1 minute @priority(medium) @done(2019-10-12 17:53) @project(bug fixes)
	✓ Add a 'worked' attribute when a task is changed from 'inprogress' to any other state. This can help with tracking time. @priority(high) @done(2019-10-12 16:58) @project(new features) @worked(1h1min)
	✓ Add support for new task state 'started' that will then add a 'started' attribute when in progress @priority(high) @done(2019-10-09 22:47) @project(new features)
	✓ Prevent cursor from jumping when archiving tasks in case no tasks are archived (?) @priority(low) @done(2019-10-09 20:10) @project(bug fixes)
	✓ Allow users to easily remap mappings @priority(high) @done(2019-10-06 22:42) @project(refactoring)
	✓ Fix bug preventing TaskComplete or TaskCancel from toggling when used on a done or cancelled task @priority(critical) @done(2019-10-06 17:12) @project(bug fixes)
	✓ Currently a line is a task if it has a marker in it, anywhere. A task should instead be optional whitespace, followed by a marker, followed by optional text @priority(medium) @done(2019-10-06 17:12) @project(bug fixes)
	✓ Allow a regular line to be turned into a task @priority(high) @done(2019-10-06 15:49) @project(new features)
	✓ Fix marking task with priority causing cursor to jump @priority(high) @done(2019-10-06 13:47) @project(bug fixes)
	✓ Add support for commands that can sort on importance attribute @priority(high) @done(2019-10-06 13:48) @project(new features)
	✓ Allow toggling of priority attributes and adding another priority should remove the other existing priority attribute (you will have to write a new function) @priority(critical) @done(2019-10-05 16:39) @project(new features)
	✓ Add support for priority attribute (low, middle, high, critical) @done(2019-10-04 23:31) @project(new features)
	✓ Remove namespace pollution by functions that shouldn't be exposed @done(2019-10-04 22:44) @project(refactoring)
	✓ Don't issue error messages, just don't do anything since they're annoying... @done(2019-10-03 21:27) @project(refactoring)
	✓ Prevent errors when GetProjects returns empty list @done(2019-10-03 21:16) @project(bug fixes)
	✓ Fix project attribute addition in nested tasks @done(2019-10-03 19:13) @project(bug fixes)
	✓ Refactor TaskComplete and TaskCancel to use a single function MarkTaskAs @done(2019-10-03 19:13) @project(refactoring)
	✓ Consistent indendation on new tasks regardless of project's indendation and its nesting level @done(2019-10-02 19:06) @project(bug fixes)
	✓ Prevent creation of new tasks inside archive section @done(2019-10-02 17:54) @project(bug fixes)
	✓ Prevent creation of a task above a group header that doesn't belong to any group @done(2019-10-02 14:51) @project(bug fixes)
	✓ Anythingwith a colon should only be considered a group header when it's at the start of a new line, or there's only whitespace in front of it @done(2019-10-02 14:51) @project(bug fixes)
	✓ Fix archiving to not result in an error when the file doesn't end in a newline @done(2019-10-02 15:44) @project(bug fixes)
